/**
 * Broadphase Collision Pairs Resource
 * 宽相碰撞对资源
 *
 * Stores collision candidate pairs generated by broadphase detection
 * for the current frame. Used by narrowphase and solver systems.
 * 存储当前帧宽相检测生成的碰撞候选对，供窄相检测和解算器系统使用。
 */

import type { Entity } from '../utils/Types';

/**
 * Collision pair representing two entities that might be colliding
 * 表示两个可能发生碰撞的实体的碰撞对
 */
export interface Pair {
  /**
   * First entity in the pair (always ordered for determinism)
   * 对中的第一个实体（总是有序的，确保确定性）
   */
  a: Entity;

  /**
   * Second entity in the pair (always ordered for determinism)
   * 对中的第二个实体（总是有序的，确保确定性）
   */
  b: Entity;
}

/**
 * Resource containing broadphase collision pairs for the current frame
 * 包含当前帧宽相碰撞对的资源
 */
export class BroadphasePairs {
  /**
   * Frame number when these pairs were generated
   * 生成这些碰撞对的帧号
   */
  frame = 0;

  /**
   * Array of collision candidate pairs
   * 碰撞候选对数组
   */
  pairs: Pair[] = [];

  /**
   * Number of potential pairs generated during sweep phase
   * 扫描阶段生成的潜在对数量
   */
  generated = 0;

  /**
   * Number of pairs culled during Y-axis filtering
   * Y轴过滤阶段剔除的对数量
   */
  culled = 0;

  /**
   * Clear all pairs and reset statistics
   * 清空所有对并重置统计信息
   */
  clear(): void {
    this.pairs.length = 0;
    this.generated = 0;
    this.culled = 0;
  }

  /**
   * Get the number of valid collision pairs
   * 获取有效碰撞对的数量
   */
  get count(): number {
    return this.pairs.length;
  }

  /**
   * Get efficiency ratio (valid pairs / total generated)
   * 获取效率比（有效对/总生成对）
   */
  get efficiency(): number {
    return this.generated > 0 ? this.pairs.length / this.generated : 1.0;
  }

  /**
   * Check if a specific pair exists in the collection
   * 检查特定对是否存在于集合中
   */
  hasPair(a: Entity, b: Entity): boolean {
    // Ensure consistent ordering
    // 确保一致的排序
    const first = (a) <= (b) ? a : b;
    const second = (a) <= (b) ? b : a;

    return this.pairs.some(pair =>
      pair.a === first && pair.b === second
    );
  }

  /**
   * Add a pair with automatic ordering for determinism
   * 添加具有自动排序的对以确保确定性
   */
  addPair(a: Entity, b: Entity): void {
    // Ensure consistent ordering
    // 确保一致的排序
    const first = (a) <= (b) ? a : b;
    const second = (a) <= (b) ? b : a;

    if (!this.hasPair(first, second)) {
      this.pairs.push({ a: first, b: second });
    }
  }

  /**
   * Get debug information about the broadphase results
   * 获取宽相结果的调试信息
   */
  getDebugInfo(): { frame: number; pairs: number; generated: number; culled: number; efficiency: string } {
    return {
      frame: this.frame,
      pairs: this.pairs.length,
      generated: this.generated,
      culled: this.culled,
      efficiency: (this.efficiency * 100).toFixed(1) + '%'
    };
  }
}