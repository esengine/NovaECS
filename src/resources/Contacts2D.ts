/**
 * 2D Contact Manifolds Resource
 * 2D接触流形资源
 *
 * Stores contact information generated by narrowphase collision detection
 * with warm-start impulse accumulation for stable solver behavior.
 * 存储窄相碰撞检测生成的接触信息，带有warm-start冲量累积以获得稳定的解算器行为。
 */

import type { Entity } from '../utils/Types';
import type { FX } from '../math/fixed';
import type { World } from '../core/World';
import { makePairKey } from '../determinism/PairKey';

/**
 * Single contact point between two entities
 * 两个实体间的单个接触点
 */
export interface Contact1 {
  /**
   * Entity A (first entity in deterministic order)
   * 实体A（确定性顺序中的第一个实体）
   */
  a: Entity;

  /**
   * Entity B (second entity in deterministic order)
   * 实体B（确定性顺序中的第二个实体）
   */
  b: Entity;

  /**
   * Contact normal vector (unit vector, pointing from A to B)
   * 接触法向量（单位向量，从A指向B）
   */
  nx: FX;
  ny: FX;

  /**
   * Contact point on entity A surface (in world coordinates)
   * 实体A表面的接触点（世界坐标）
   */
  px: FX;
  py: FX;

  /**
   * Penetration depth (always positive for overlapping contacts)
   * 穿透深度（重叠接触时始终为正值）
   */
  pen: FX;

  /**
   * Accumulated normal impulse for warm-starting
   * 用于warm-start的累积法向冲量
   */
  jn: FX;

  /**
   * Accumulated tangential impulse for warm-starting
   * 用于warm-start的累积切向冲量
   */
  jt: FX;

  /**
   * Speculative contact flag (1 = speculative, 0 or undefined = regular)
   * 推测接触标志（1=推测接触，0或undefined=常规接触）
   */
  speculative?: 0 | 1;

  /**
   * Time of impact in frame-relative units [0..ONE]
   * 帧内冲击时间，范围[0..ONE]，即(t_hit/dt)
   */
  toi?: FX;
}

/**
 * 2D Contact system resource
 * 2D接触系统资源
 *
 * Manages current frame contacts and previous frame impulse cache
 * for warm-start behavior in constraint solver.
 * 管理当前帧接触和上一帧冲量缓存，为约束解算器提供warm-start行为。
 */
export class Contacts2D {
  /**
   * Frame number when contacts were last updated
   * 接触最后更新的帧号
   */
  frame = 0 >>> 0;

  /**
   * Current frame contact list
   * 当前帧接触列表
   */
  list: Contact1[] = [];

  /**
   * Previous frame impulse cache for warm-starting
   * Key format: "entityA-entityB" (deterministic ordering)
   * 上一帧冲量缓存用于warm-start
   * 键格式："entityA-entityB"（确定性排序）
   */
  prev: Map<string, { jn: FX; jt: FX }> = new Map();

  /**
   * Clear current frame contacts (preserves impulse cache)
   * 清空当前帧接触（保留冲量缓存）
   */
  clear(): void {
    this.list.length = 0;
  }

  /**
   * Add a contact to the current frame
   * 向当前帧添加接触
   */
  addContact(contact: Contact1): void {
    this.list.push(contact);
  }

  /**
   * Get the number of contacts in current frame
   * 获取当前帧的接触数量
   */
  count(): number {
    return this.list.length;
  }

  /**
   * Update impulse cache with current frame results
   * Should be called after solver completes
   * 使用当前帧结果更新冲量缓存
   * 应在解算器完成后调用
   */
  updateCache(world: World): void {
    this.prev.clear();
    for (const contact of this.list) {
      const { key } = makePairKey(world, contact.a, contact.b);
      this.prev.set(key, {
        jn: contact.jn,
        jt: contact.jt
      });
    }
  }

  /**
   * Get cached impulse for entity pair, if available
   * 获取实体对的缓存冲量（如果可用）
   */
  getCachedImpulse(world: World, a: Entity, b: Entity): { jn: FX; jt: FX } | undefined {
    const { key } = makePairKey(world, a, b);
    return this.prev.get(key);
  }

  /**
   * Get statistics about contact system
   * 获取接触系统统计信息
   */
  getStats(): {
    contacts: number;
    cached: number;
    frame: number;
  } {
    return {
      contacts: this.list.length,
      cached: this.prev.size,
      frame: this.frame
    };
  }
}